name: Lint and test

on: push

jobs:
  lint-and-test:
    permissions: write-all
    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      matrix:
        python-version: [ "3.9" ]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Lint
        run: |
          poetry run black --config black.py.toml . --check
          poetry run ruff check .

      - name: Test
        env:
          APP_OPENAI_API_KEY: ${{ secrets.APP_OPENAI_API_KEY }}
          APP_WEAVIATE_API_KEY: ${{ secrets.APP_WEAVIATE_API_KEY }}
          COSMOS_KEY: ${{ secrets.COSMOS_KEY }}
        run: |
          set -o pipefail
          poetry run pytest --cov=ai_document_search_backend --junitxml=pytest.xml --cov-report=term-missing:skip-covered --cov-fail-under=70 | tee pytest-coverage.txt

      - name: Load Test
        env: 
          APP_OPENAI_API_KEY: ${{ secrets.APP_OPENAI_API_KEY }}
          APP_WEAVIATE_API_KEY: ${{ secrets.APP_WEAVIATE_API_KEY }}
          COSMOS_KEY: ${{ secrets.COSMOS_KEY }}
          AUTH_USERNAME: ${{ secrets.AUTH_USERNAME}}
          AUTH_PASSWORD: ${{ secrets.AUTH_PASSWORD}}
        run: poetry run locust -f tests\load_tests\locustfile.py --host http://127.0.0.1:8000 -u 5 -r 5 -t 3m --headless

      - name: Pytest coverage comment
        id: coverageComment
        uses: MishaKav/pytest-coverage-comment@main
        if: always()
        with:
          pytest-coverage-path: ./pytest-coverage.txt
          junitxml-path: ./pytest.xml
          unique-id-for-comment: ${{ matrix.python-version }}
          default-branch: master

      - name: Create coverage badge
        uses: schneegans/dynamic-badges-action@v1.6.0
        with:
          auth: ${{ secrets.PYTEST_COVERAGE_BADGE_GIST_SECRET }}
          gistID: 33a367226c0ebc77e2e059ec7e9204fb
          filename: pytest-coverage-comment__master.json
          label: Coverage Report
          message: ${{ steps.coverageComment.outputs.coverage }}
          color: ${{ steps.coverageComment.outputs.color }}
          namedLogo: python
